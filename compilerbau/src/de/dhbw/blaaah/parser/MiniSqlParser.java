
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 04 16:56:53 CET 2013
//----------------------------------------------------

package de.dhbw.blaaah.parser;

import java_cup.runtime.*;
import java.util.*;
import de.dhbw.blaaah.*;
import de.dhbw.blaaah.conditions.*;
import de.dhbw.blaaah.statements.*;
import de.dhbw.blaaah.database.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 04 16:56:53 CET 2013
  */
public class MiniSqlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MiniSqlParser() {super();}

  /** Constructor which sets the default scanner. */
  public MiniSqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiniSqlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\006\013\000\002\012\005\000\002\012\003\000\002" +
    "\014\007\000\002\014\005\000\002\013\005\000\002\013" +
    "\003\000\002\005\007\000\002\005\013\000\002\015\005" +
    "\000\002\015\003\000\002\015\005\000\002\015\003\000" +
    "\002\004\011\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\016\006\000\002\016\004\000\002\007" +
    "\011\000\002\007\014\000\002\010\007\000\002\010\013" +
    "\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\016\004\016\006\005\010\021\012\012\014" +
    "\014\015\004\001\002\000\004\007\130\001\002\000\004" +
    "\007\112\001\002\000\020\002\ufffc\004\ufffc\006\ufffc\010" +
    "\ufffc\012\ufffc\014\ufffc\015\ufffc\001\002\000\020\002\ufff9" +
    "\004\ufff9\006\ufff9\010\ufff9\012\ufff9\014\ufff9\015\ufff9\001" +
    "\002\000\020\002\ufffe\004\ufffe\006\ufffe\010\ufffe\012\ufffe" +
    "\014\ufffe\015\ufffe\001\002\000\020\002\ufffa\004\ufffa\006" +
    "\ufffa\010\ufffa\012\ufffa\014\ufffa\015\ufffa\001\002\000\004" +
    "\017\100\001\002\000\020\002\ufffd\004\ufffd\006\ufffd\010" +
    "\ufffd\012\ufffd\014\ufffd\015\ufffd\001\002\000\004\023\067" +
    "\001\002\000\020\002\uffff\004\uffff\006\uffff\010\uffff\012" +
    "\uffff\014\uffff\015\uffff\001\002\000\006\017\053\023\051" +
    "\001\002\000\020\002\ufffb\004\ufffb\006\ufffb\010\ufffb\012" +
    "\ufffb\014\ufffb\015\ufffb\001\002\000\020\002\047\004\016" +
    "\006\005\010\021\012\012\014\014\015\004\001\002\000" +
    "\004\011\022\001\002\000\004\017\023\001\002\000\004" +
    "\026\024\001\002\000\004\017\026\001\002\000\006\016" +
    "\027\027\030\001\002\000\006\016\ufff6\027\ufff6\001\002" +
    "\000\004\017\046\001\002\000\004\021\031\001\002\000" +
    "\004\026\032\001\002\000\004\020\040\001\002\000\006" +
    "\016\034\024\035\001\002\000\004\026\036\001\002\000" +
    "\020\002\ufff8\004\ufff8\006\ufff8\010\ufff8\012\ufff8\014\ufff8" +
    "\015\ufff8\001\002\000\004\020\040\001\002\000\006\016" +
    "\041\027\042\001\002\000\006\016\ufff2\027\ufff2\001\002" +
    "\000\004\020\043\001\002\000\006\016\ufff5\024\ufff5\001" +
    "\002\000\006\016\ufff3\027\ufff3\001\002\000\006\016\041" +
    "\027\045\001\002\000\006\016\ufff4\024\ufff4\001\002\000" +
    "\006\016\ufff7\027\ufff7\001\002\000\004\002\000\001\002" +
    "\000\020\002\001\004\001\006\001\010\001\012\001\014" +
    "\001\015\001\001\002\000\006\005\uffec\016\uffec\001\002" +
    "\000\006\005\055\016\054\001\002\000\006\005\uffee\016" +
    "\uffee\001\002\000\006\017\066\023\065\001\002\000\004" +
    "\017\056\001\002\000\006\022\060\024\057\001\002\000" +
    "\020\002\ufff1\004\ufff1\006\ufff1\010\ufff1\012\ufff1\014\ufff1" +
    "\015\ufff1\001\002\000\004\017\061\001\002\000\004\025" +
    "\062\001\002\000\004\020\063\001\002\000\004\024\064" +
    "\001\002\000\020\002\ufff0\004\ufff0\006\ufff0\010\ufff0\012" +
    "\ufff0\014\ufff0\015\ufff0\001\002\000\006\005\uffed\016\uffed" +
    "\001\002\000\006\005\uffef\016\uffef\001\002\000\004\005" +
    "\070\001\002\000\004\017\071\001\002\000\006\022\073" +
    "\024\072\001\002\000\020\002\uffe3\004\uffe3\006\uffe3\010" +
    "\uffe3\012\uffe3\014\uffe3\015\uffe3\001\002\000\004\017\074" +
    "\001\002\000\004\025\075\001\002\000\004\020\076\001" +
    "\002\000\004\024\077\001\002\000\020\002\uffe2\004\uffe2" +
    "\006\uffe2\010\uffe2\012\uffe2\014\uffe2\015\uffe2\001\002\000" +
    "\004\013\101\001\002\000\004\017\102\001\002\000\004" +
    "\025\103\001\002\000\004\020\104\001\002\000\006\022" +
    "\106\024\105\001\002\000\020\002\uffe5\004\uffe5\006\uffe5" +
    "\010\uffe5\012\uffe5\014\uffe5\015\uffe5\001\002\000\004\017" +
    "\107\001\002\000\004\025\110\001\002\000\004\020\111" +
    "\001\002\000\020\002\uffe4\004\uffe4\006\uffe4\010\uffe4\012" +
    "\uffe4\014\uffe4\015\uffe4\001\002\000\004\017\113\001\002" +
    "\000\004\026\114\001\002\000\004\017\116\001\002\000" +
    "\006\016\123\027\124\001\002\000\010\030\120\031\117" +
    "\032\122\001\002\000\006\016\uffe9\027\uffe9\001\002\000" +
    "\006\016\uffea\027\uffea\001\002\000\006\016\uffe6\027\uffe6" +
    "\001\002\000\006\016\uffe8\027\uffe8\001\002\000\004\017" +
    "\126\001\002\000\004\024\125\001\002\000\020\002\uffeb" +
    "\004\uffeb\006\uffeb\010\uffeb\012\uffeb\014\uffeb\015\uffeb\001" +
    "\002\000\010\030\120\031\117\032\122\001\002\000\006" +
    "\016\uffe7\027\uffe7\001\002\000\004\017\131\001\002\000" +
    "\004\024\132\001\002\000\020\002\uffe1\004\uffe1\006\uffe1" +
    "\010\uffe1\012\uffe1\014\uffe1\015\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\022\002\017\003\014\004\005\005\012\006" +
    "\007\007\016\010\010\011\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\051\001\001\000\002\001\001\000\020\003\047\004\005" +
    "\005\012\006\007\007\016\010\010\011\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\032\001\001" +
    "\000\004\013\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\114" +
    "\001\001\000\002\001\001\000\004\017\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiniSqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiniSqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiniSqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Symbol parse(java.io.InputStream inputStream) throws Exception {
        SymbolFactory factory = new DefaultSymbolFactory();
        return new MiniSqlParser(new MiniSqlScanner(inputStream, factory), factory).parse();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MiniSqlParser$actions {
  private final MiniSqlParser parser;

  /** Constructor */
  CUP$MiniSqlParser$actions(MiniSqlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MiniSqlParser$do_action(
    int                        CUP$MiniSqlParser$act_num,
    java_cup.runtime.lr_parser CUP$MiniSqlParser$parser,
    java.util.Stack            CUP$MiniSqlParser$stack,
    int                        CUP$MiniSqlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiniSqlParser$result;

      /* select the action based on the action number */
      switch (CUP$MiniSqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // drop_statement ::= DROP TABLE NAME SEMICOLON 
            {
              Object RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object table = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		
                    RESULT = new DropTableStatement((String)table);
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("drop_statement",7, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // delete_statement ::= DELETE STAR FROM NAME WHERE NAME EQUAL VALUE SEMICOLON 
            {
              Object RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-5)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-5)).right;
		Object table = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		
                    RESULT = new DeleteStatement((String)table, new EqualsCondition((String)name, ParserUtil.value((String)value)));
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("delete_statement",6, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // delete_statement ::= DELETE STAR FROM NAME SEMICOLON 
            {
              Object RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object table = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		
                    RESULT = new DeleteStatement((String)table, new AlwaysTrueCondition());
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("delete_statement",6, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // update_statement ::= UPDATE NAME SET NAME EQUAL VALUE WHERE NAME EQUAL VALUE 
            {
              Object RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-8)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-8)).right;
		Object table = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-6)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).value;
		int columnleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).right;
		Object column = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).value;
		int columnvleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int columnvright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object columnv = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		
                    RESULT = new UpdateStatement((String)table, (String)name, ParserUtil.value((String)value), new EqualsCondition((String)column, ParserUtil.value((String)columnv)));
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("update_statement",5, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-9)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // update_statement ::= UPDATE NAME SET NAME EQUAL VALUE SEMICOLON 
            {
              Object RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-5)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-5)).right;
		Object table = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		
                    RESULT = new UpdateStatement((String)table, (String)name, ParserUtil.value((String)value), new AlwaysTrueCondition());
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("update_statement",5, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // create_list ::= NAME typ 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object typ = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		
                    List<ColumnDefinition> tmp = new ArrayList<ColumnDefinition>();
                    tmp.add(new ColumnDefinition((String)name, (String)typ));
                    RESULT = tmp;
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("create_list",12, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // create_list ::= create_list COMMA NAME typ 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object typ = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		
                    ((List<ColumnDefinition>)list).add(new ColumnDefinition((String)name, (String)typ));
                    RESULT = list;
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("create_list",12, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typ ::= DATE 
            {
              Object RESULT =null;
		
			RESULT = "DATE";
		
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("typ",13, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typ ::= TEXT 
            {
              Object RESULT =null;
		
			RESULT = "TEXT";
		
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("typ",13, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // typ ::= NUMBER 
            {
              Object RESULT =null;
		
			RESULT = "NUMBER";
		
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("typ",13, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // create_statement ::= CREATE TABLE NAME LEFT_PARENTHESIS create_list RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).right;
		Object table = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).value;
		int createleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).left;
		int createright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).right;
		Object create = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).value;
		
                    RESULT = new CreateTableStatement((List<ColumnDefinition>)create, (String)table);
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("create_statement",2, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // select_list ::= STAR 
            {
              Object RESULT =null;
		
                    List<String> tmp = new ArrayList<String>();
                    tmp.add("*");
                    RESULT = tmp;
                
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("select_list",11, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // select_list ::= select_list COMMA STAR 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).value;
		
                    ((List<String>)list).add("*");
                    RESULT = list;
                
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("select_list",11, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // select_list ::= NAME 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		
                    List<String> tmp = new ArrayList<String>();
                    tmp.add((String)name);
                    RESULT = tmp;
                
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("select_list",11, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // select_list ::= select_list COMMA NAME 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		
                    ((List<String>)list).add((String)name);
                    RESULT = list;
                
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("select_list",11, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // select_statement ::= SELECT select_list FROM NAME WHERE NAME EQUAL VALUE SEMICOLON 
            {
              Object RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-7)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-7)).right;
		Object select = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-7)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-5)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-5)).right;
		Object table = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		
                    RESULT = new SelectStatement((List<String>)select, (String)table, new EqualsCondition((String)name, ParserUtil.value((String)value)));
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("select_statement",3, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // select_statement ::= SELECT select_list FROM NAME SEMICOLON 
            {
              Object RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).right;
		Object select = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-3)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object table = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		
                    RESULT = new SelectStatement((List<String>)select, (String)table, new AlwaysTrueCondition());
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("select_statement",3, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // value_list ::= VALUE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		
                    List<String> tmp = new ArrayList<String>();
                    tmp.add(ParserUtil.value((String)value));
                    RESULT = tmp;
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("value_list",9, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value_list ::= value_list COMMA VALUE 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		
                   ((List<String>)list).add(ParserUtil.value((String)value));
                   RESULT = list;
               
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("value_list",9, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // row_list ::= LEFT_PARENTHESIS value_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int rowleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object row = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		
                    List<List<String>> tmp = new ArrayList<List<String>>();
                    tmp.add((List<String>)row);
                    RESULT = tmp;
                
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("row_list",10, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // row_list ::= row_list COMMA LEFT_PARENTHESIS value_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).value;
		int rowleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object row = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		
                    ((List<List<String>>)list).add((List<String>)row);
                    RESULT = list;
                
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("row_list",10, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // name_list ::= NAME 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		
                    List<String> tmp = new ArrayList<String>();
                    tmp.add((String)name);
                    RESULT = tmp;
                
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("name_list",8, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // name_list ::= name_list COMMA NAME 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		
                    ((List<String>)list).add((String)name);
                    RESULT = list;
                
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("name_list",8, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // insert_statement ::= INSERT INTO NAME LEFT_PARENTHESIS name_list RIGHT_PARENTHESIS VALUES row_list SEMICOLON 
            {
              Object RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-6)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-6)).right;
		Object table = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-6)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).right;
		Object columns = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-4)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object values = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		
                    RESULT = new InsertStatement((String)table, (List<String>)columns, (List<List<String>>)values);
                
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("insert_statement",4, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= drop_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= delete_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= update_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= create_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= select_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= insert_statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= statement 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		
                        List<Statement> tmp = new ArrayList<Statement>();
                        tmp.add((Statement)st);
                        RESULT = tmp;
                    
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("statement_list",0, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= statement_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		RESULT = start_val;
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiniSqlParser$parser.done_parsing();
          return CUP$MiniSqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$MiniSqlParser$stack.peek()).value;
		
                        ((List<Statement>)list).add((Statement)st);
                        RESULT = list;
                    
              CUP$MiniSqlParser$result = parser.getSymbolFactory().newSymbol("statement_list",0, ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.elementAt(CUP$MiniSqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniSqlParser$stack.peek()), RESULT);
            }
          return CUP$MiniSqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}



package de.dhbw.blaaah.parser;

import java_cup.runtime.*;
import java.util.*;
import de.dhbw.blaaah.*;
import de.dhbw.blaaah.conditions.*;
import de.dhbw.blaaah.statements.*;
import de.dhbw.blaaah.database.*;

parser code {:
    public static Symbol parse(java.io.InputStream inputStream) throws Exception {
        SymbolFactory factory = new DefaultSymbolFactory();
        return new MiniSqlParser(new MiniSqlScanner(inputStream, factory), factory).parse();
    }
:}

terminal SELECT, FROM, CREATE, TABLE, INSERT, INTO, UPDATE, SET, DELETE, DROP;

terminal COMMA, NAME, VALUE, VALUES, WHERE, STAR, SEMICOLON, EQUAL, LEFT_PARENTHESIS, RIGHT_PARENTHESIS;

terminal NUMBER, TEXT, DATE;

non terminal statement_list, statement, create_statement, select_statement, insert_statement, update_statement, delete_statement, drop_statement;

non terminal where_condition;

non terminal name_list, value_list, row_list, select_list, create_list;

non terminal typ;

statement_list ::= statement_list:list statement:st
                    {:
                        ((List<Statement>)list).add((Statement)st);
                        RESULT = list;
                    :}
                    | statement:st
                    {:
                        List<Statement> tmp = new ArrayList<Statement>();
                        tmp.add((Statement)st);
                        RESULT = tmp;
                    :};

statement ::= insert_statement:s {: RESULT = s; :}
        | select_statement:s {: RESULT = s; :}
        | create_statement:s {: RESULT = s; :}
        | update_statement:s {: RESULT = s; :}
        | delete_statement:s {: RESULT = s; :}
        | drop_statement:s   {: RESULT = s; :};

insert_statement ::= INSERT INTO NAME:table LEFT_PARENTHESIS name_list:columns RIGHT_PARENTHESIS VALUES row_list:values SEMICOLON
                {:
                    RESULT = new InsertStatement((String)table, (List<String>)columns, (List<List<String>>)values);
                :};

name_list ::= name_list:list COMMA NAME:name
                {:
                    ((List<String>)list).add((String)name);
                    RESULT = list;
                :}
                | NAME:name
                {:
                    List<String> tmp = new ArrayList<String>();
                    tmp.add((String)name);
                    RESULT = tmp;
                :};

row_list ::= row_list:list COMMA LEFT_PARENTHESIS value_list:row RIGHT_PARENTHESIS
                {:
                    ((List<List<String>>)list).add((List<String>)row);
                    RESULT = list;
                :}
                | LEFT_PARENTHESIS value_list:row RIGHT_PARENTHESIS
                {:
                    List<List<String>> tmp = new ArrayList<List<String>>();
                    tmp.add((List<String>)row);
                    RESULT = tmp;
                :};

value_list  ::= value_list:list COMMA VALUE:value

               {:
                   ((List<String>)list).add(ParserUtil.value((String)value));
                   RESULT = list;
               :}
               | VALUE:value
               {:
                    List<String> tmp = new ArrayList<String>();
                    tmp.add(ParserUtil.value((String)value));
                    RESULT = tmp;
               :};

select_statement ::= SELECT select_list:select FROM NAME:table SEMICOLON
				{:
					 RESULT = new SelectStatement((List<String>)select, (String)table, new AlwaysTrueCondition());
				:}
				| SELECT select_list:select FROM NAME:table where_condition:condition SEMICOLON
               	{:
                	RESULT = new SelectStatement((List<String>)select, (String)table, (WhereCondition)condition);
               	:};

select_list ::= select_list:list COMMA NAME:name
                {:
                    ((List<String>)list).add((String)name);
                    RESULT = list;
                :}
                | NAME:name
                {:
                    List<String> tmp = new ArrayList<String>();
                    tmp.add((String)name);
                    RESULT = tmp;
                :}
                | select_list:list COMMA STAR
                {:
                    ((List<String>)list).add("*");
                    RESULT = list;
                :}
                | STAR
                {:
                    List<String> tmp = new ArrayList<String>();
                    tmp.add("*");
                    RESULT = tmp;
                :};


create_statement ::= CREATE TABLE NAME:table LEFT_PARENTHESIS create_list:create RIGHT_PARENTHESIS SEMICOLON
               {:
                    RESULT = new CreateTableStatement((List<ColumnDefinition>)create, (String)table);
               :};

typ ::= NUMBER
		{:
			RESULT = "NUMBER";
		:}
		| TEXT
		{:
			RESULT = "TEXT";
		:}
		| DATE
		{:
			RESULT = "DATE";
		:};

create_list ::= create_list:list COMMA NAME:name typ:typ
               {:
                    ((List<ColumnDefinition>)list).add(new ColumnDefinition((String)name, (String)typ));
                    RESULT = list;
               :}
               | NAME:name typ:typ
               {:
                    List<ColumnDefinition> tmp = new ArrayList<ColumnDefinition>();
                    tmp.add(new ColumnDefinition((String)name, (String)typ));
                    RESULT = tmp;
               :};

update_statement ::= UPDATE NAME:table SET NAME:name EQUAL VALUE:value SEMICOLON
               {:
                    RESULT = new UpdateStatement((String)table, (String)name, ParserUtil.value((String)value), new AlwaysTrueCondition());
               :}
               | UPDATE NAME:table SET NAME:name EQUAL VALUE:value where_condition:condition SEMICOLON
               {:
                    RESULT = new UpdateStatement((String)table, (String)name, ParserUtil.value((String)value), (WhereCondition)condition);
               :};

delete_statement ::= DELETE STAR FROM NAME:table SEMICOLON
               {:
                    RESULT = new DeleteStatement((String)table, new AlwaysTrueCondition());
               :}
               | DELETE STAR FROM NAME:table where_condition:condition SEMICOLON
               {:
                    RESULT = new DeleteStatement((String)table, (WhereCondition)condition);
               :};

drop_statement ::= DROP TABLE NAME:table SEMICOLON
               {:
                    RESULT = new DropTableStatement((String)table);
               :};

where_condition ::= WHERE NAME:column EQUAL VALUE:value
				{:
					RESULT = new EqualsCondition((String)column, ParserUtil.value((String)value));
				:};